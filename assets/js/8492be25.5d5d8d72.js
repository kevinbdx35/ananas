"use strict";(self.webpackChunkcoursess=self.webpackChunkcoursess||[]).push([[2137],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return m}});var r=t(7294);function s(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){s(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,s=function(e,n){if(null==e)return{};var t,r,s={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(s[t]=e[t]);return s}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var l=r.createContext({}),u=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=u(e.components);return r.createElement(l.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,s=e.mdxType,a=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=u(t),m=s,g=d["".concat(l,".").concat(m)]||d[m]||p[m]||a;return t?r.createElement(g,o(o({ref:n},c),{},{components:t})):r.createElement(g,o({ref:n},c))}));function m(e,n){var t=arguments,s=n&&n.mdxType;if("string"==typeof e||s){var a=t.length,o=new Array(a);o[0]=d;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i.mdxType="string"==typeof e?e:s,o[1]=i;for(var u=2;u<a;u++)o[u]=t[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},2962:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return i},contentTitle:function(){return l},metadata:function(){return u},toc:function(){return c},default:function(){return d}});var r=t(7462),s=t(3366),a=(t(7294),t(3905)),o=["components"],i={sidebar_position:1},l="D\xe9veloppement Back-end \u2699\ufe0f",u={unversionedId:"back-end/back-end",id:"back-end/back-end",title:"D\xe9veloppement Back-end \u2699\ufe0f",description:"Le d\xe9veloppement back-end constitue le c\u0153ur invisible de toute application web. C'est la partie qui g\xe8re la logique m\xe9tier, les donn\xe9es, la s\xe9curit\xe9 et les communications entre le client et le serveur.",source:"@site/docs/back-end/back-end.md",sourceDirName:"back-end",slug:"/back-end/",permalink:"/ananas/docs/back-end/",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/back-end/back-end.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Les couleurs dans l'UI Design",permalink:"/ananas/docs/tutorial-design/couleurs-ui-design"},next:{title:"NPM - Node Package Manager \ud83d\udce6",permalink:"/ananas/docs/back-end/npm"}},c=[{value:"\ud83c\udfaf Qu&#39;est-ce que le back-end ?",id:"-quest-ce-que-le-back-end-",children:[{value:"Responsabilit\xe9s du back-end",id:"responsabilit\xe9s-du-back-end",children:[],level:3}],level:2},{value:"\ud83d\udee0\ufe0f Technologies back-end populaires",id:"\ufe0f-technologies-back-end-populaires",children:[{value:"Langages de programmation",id:"langages-de-programmation",children:[{value:"JavaScript (Node.js) \ud83d\udfe2",id:"javascript-nodejs-",children:[],level:4},{value:"Python \ud83d\udc0d",id:"python-",children:[],level:4},{value:"PHP \ud83d\udc18",id:"php-",children:[],level:4}],level:3},{value:"Frameworks populaires",id:"frameworks-populaires",children:[],level:3}],level:2},{value:"\ud83d\uddc4\ufe0f Bases de donn\xe9es",id:"\ufe0f-bases-de-donn\xe9es",children:[{value:"SQL (Relationnelles)",id:"sql-relationnelles",children:[{value:"MySQL/PostgreSQL",id:"mysqlpostgresql",children:[],level:4}],level:3},{value:"NoSQL (Non-relationnelles)",id:"nosql-non-relationnelles",children:[{value:"MongoDB",id:"mongodb",children:[],level:4}],level:3}],level:2},{value:"\ud83d\udd10 Authentification et s\xe9curit\xe9",id:"-authentification-et-s\xe9curit\xe9",children:[{value:"JWT (JSON Web Tokens)",id:"jwt-json-web-tokens",children:[],level:3},{value:"Validation et s\xe9curit\xe9",id:"validation-et-s\xe9curit\xe9",children:[],level:3}],level:2},{value:"\ud83d\udce1 APIs et communication",id:"-apis-et-communication",children:[{value:"REST API",id:"rest-api",children:[],level:3},{value:"GraphQL",id:"graphql",children:[],level:3}],level:2},{value:"\ud83c\udfd7\ufe0f Architecture et patterns",id:"\ufe0f-architecture-et-patterns",children:[{value:"Architecture en couches",id:"architecture-en-couches",children:[],level:3},{value:"Microservices",id:"microservices",children:[],level:3}],level:2},{value:"\ud83d\ude80 D\xe9ploiement et DevOps",id:"-d\xe9ploiement-et-devops",children:[{value:"Docker",id:"docker",children:[],level:3},{value:"CI/CD avec GitHub Actions",id:"cicd-avec-github-actions",children:[],level:3}],level:2},{value:"\ud83d\udcca Monitoring et observabilit\xe9",id:"-monitoring-et-observabilit\xe9",children:[{value:"Logging",id:"logging",children:[],level:3},{value:"M\xe9triques avec Prometheus",id:"m\xe9triques-avec-prometheus",children:[],level:3}],level:2},{value:"\ud83c\udfaf Exercices pratiques",id:"-exercices-pratiques",children:[{value:"Exercice 1 : API de blog",id:"exercice-1--api-de-blog",children:[],level:3},{value:"Exercice 2 : Chat en temps r\xe9el",id:"exercice-2--chat-en-temps-r\xe9el",children:[],level:3},{value:"Exercice 3 : E-commerce backend",id:"exercice-3--e-commerce-backend",children:[],level:3}],level:2},{value:"\ud83d\ude80 Pour aller plus loin",id:"-pour-aller-plus-loin",children:[{value:"Concepts avanc\xe9s \xe0 explorer",id:"concepts-avanc\xe9s-\xe0-explorer",children:[],level:3},{value:"Ressources recommand\xe9es",id:"ressources-recommand\xe9es",children:[],level:3}],level:2}],p={toc:c};function d(e){var n=e.components,t=(0,s.Z)(e,o);return(0,a.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"d\xe9veloppement-back-end-\ufe0f"},"D\xe9veloppement Back-end \u2699\ufe0f"),(0,a.kt)("p",null,"Le d\xe9veloppement back-end constitue le ",(0,a.kt)("strong",{parentName:"p"},"c\u0153ur invisible")," de toute application web. C'est la partie qui g\xe8re la logique m\xe9tier, les donn\xe9es, la s\xe9curit\xe9 et les communications entre le client et le serveur."),(0,a.kt)("h2",{id:"-quest-ce-que-le-back-end-"},"\ud83c\udfaf Qu'est-ce que le back-end ?"),(0,a.kt)("p",null,"Le ",(0,a.kt)("strong",{parentName:"p"},"back-end"),' (ou c\xf4t\xe9 serveur) est responsable de tout ce qui se passe "derri\xe8re les rideaux" :'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   FRONT-END     \u2502\u2500\u2500\u2500\u25ba\u2502    BACK-END     \u2502\u2500\u2500\u2500\u25ba\u2502  BASE DE DONN\xc9ES\u2502\n\u2502                 \u2502\u25c4\u2500\u2500\u2500\u2502                 \u2502\u25c4\u2500\u2500\u2500\u2502                 \u2502\n\u2502 \u2022 Interface     \u2502    \u2502 \u2022 Serveur       \u2502    \u2502 \u2022 MySQL         \u2502\n\u2502 \u2022 Interactions  \u2502    \u2502 \u2022 API           \u2502    \u2502 \u2022 PostgreSQL    \u2502\n\u2502 \u2022 Pr\xe9sentation  \u2502    \u2502 \u2022 Logique       \u2502    \u2502 \u2022 MongoDB       \u2502\n\u2502 \u2022 Validation    \u2502    \u2502 \u2022 S\xe9curit\xe9      \u2502    \u2502 \u2022 Redis         \u2502\n\u2502   client        \u2502    \u2502 \u2022 Authentification\u2502  \u2502 \u2022 ElasticSearch \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,a.kt)("h3",{id:"responsabilit\xe9s-du-back-end"},"Responsabilit\xe9s du back-end"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\ud83d\udd10 ",(0,a.kt)("strong",{parentName:"li"},"Authentification et autorisation")," - Qui peut acc\xe9der \xe0 quoi ?"),(0,a.kt)("li",{parentName:"ul"},"\ud83d\uddc4\ufe0f ",(0,a.kt)("strong",{parentName:"li"},"Gestion des donn\xe9es")," - Stockage, r\xe9cup\xe9ration, mise \xe0 jour"),(0,a.kt)("li",{parentName:"ul"},"\ud83d\udd12 ",(0,a.kt)("strong",{parentName:"li"},"S\xe9curit\xe9")," - Protection contre les attaques, validation des donn\xe9es"),(0,a.kt)("li",{parentName:"ul"},"\ud83d\udcca ",(0,a.kt)("strong",{parentName:"li"},"Logique m\xe9tier")," - R\xe8gles et processus sp\xe9cifiques \xe0 l'application"),(0,a.kt)("li",{parentName:"ul"},"\ud83c\udf10 ",(0,a.kt)("strong",{parentName:"li"},"API et communication")," - Interface entre front-end et donn\xe9es"),(0,a.kt)("li",{parentName:"ul"},"\u26a1 ",(0,a.kt)("strong",{parentName:"li"},"Performance")," - Optimisation des requ\xeates et mise en cache"),(0,a.kt)("li",{parentName:"ul"},"\ud83d\udcc8 ",(0,a.kt)("strong",{parentName:"li"},"Monitoring")," - Surveillance et logs des erreurs")),(0,a.kt)("h2",{id:"\ufe0f-technologies-back-end-populaires"},"\ud83d\udee0\ufe0f Technologies back-end populaires"),(0,a.kt)("h3",{id:"langages-de-programmation"},"Langages de programmation"),(0,a.kt)("h4",{id:"javascript-nodejs-"},"JavaScript (Node.js) \ud83d\udfe2"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"// Serveur Express.js simple\nconst express = require('express');\nconst app = express();\nconst PORT = 3000;\n\napp.get('/api/users', (req, res) => {\n    const users = [\n        { id: 1, name: 'Alice', email: 'alice@example.com' },\n        { id: 2, name: 'Bob', email: 'bob@example.com' }\n    ];\n    res.json(users);\n});\n\napp.listen(PORT, () => {\n    console.log(`Serveur d\xe9marr\xe9 sur http://localhost:${PORT}`);\n});\n")),(0,a.kt)("h4",{id:"python-"},"Python \ud83d\udc0d"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"# API avec Flask\nfrom flask import Flask, jsonify, request\nfrom flask_sqlalchemy import SQLAlchemy\n\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///users.db'\ndb = SQLAlchemy(app)\n\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(80), nullable=False)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n\n@app.route('/api/users', methods=['GET'])\ndef get_users():\n    users = User.query.all()\n    return jsonify([{\n        'id': user.id,\n        'name': user.name,\n        'email': user.email\n    } for user in users])\n\n@app.route('/api/users', methods=['POST'])\ndef create_user():\n    data = request.get_json()\n    user = User(name=data['name'], email=data['email'])\n    db.session.add(user)\n    db.session.commit()\n    return jsonify({'message': 'Utilisateur cr\xe9\xe9'}), 201\n\nif __name__ == '__main__':\n    app.run(debug=True)\n")),(0,a.kt)("h4",{id:"php-"},"PHP \ud83d\udc18"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n// API REST avec PHP pur\nheader('Content-Type: application/json');\nheader('Access-Control-Allow-Origin: *');\n\n$method = $_SERVER['REQUEST_METHOD'];\n$path = $_SERVER['PATH_INFO'] ?? '/';\n\n// Connexion base de donn\xe9es\n$pdo = new PDO('mysql:host=localhost;dbname=myapp', $username, $password);\n\nswitch ($method) {\n    case 'GET':\n        if ($path === '/users') {\n            $stmt = $pdo->query('SELECT * FROM users');\n            $users = $stmt->fetchAll(PDO::FETCH_ASSOC);\n            echo json_encode($users);\n        }\n        break;\n        \n    case 'POST':\n        if ($path === '/users') {\n            $data = json_decode(file_get_contents('php://input'), true);\n            $stmt = $pdo->prepare('INSERT INTO users (name, email) VALUES (?, ?)');\n            $stmt->execute([$data['name'], $data['email']]);\n            echo json_encode(['message' => 'Utilisateur cr\xe9\xe9']);\n        }\n        break;\n}\n?>\n")),(0,a.kt)("h3",{id:"frameworks-populaires"},"Frameworks populaires"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Langage"),(0,a.kt)("th",{parentName:"tr",align:null},"Framework"),(0,a.kt)("th",{parentName:"tr",align:null},"Popularit\xe9"),(0,a.kt)("th",{parentName:"tr",align:null},"Avantages"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"JavaScript"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"Express.js")),(0,a.kt)("td",{parentName:"tr",align:null},"\u2b50\u2b50\u2b50\u2b50\u2b50"),(0,a.kt)("td",{parentName:"tr",align:null},"Simple, flexible, \xe9cosyst\xe8me riche")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"JavaScript"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"NestJS")),(0,a.kt)("td",{parentName:"tr",align:null},"\u2b50\u2b50\u2b50\u2b50"),(0,a.kt)("td",{parentName:"tr",align:null},"TypeScript, architecture modulaire")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Python"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"Django")),(0,a.kt)("td",{parentName:"tr",align:null},"\u2b50\u2b50\u2b50\u2b50\u2b50"),(0,a.kt)("td",{parentName:"tr",align:null},"Complet, admin interface, ORM")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Python"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"FastAPI")),(0,a.kt)("td",{parentName:"tr",align:null},"\u2b50\u2b50\u2b50\u2b50"),(0,a.kt)("td",{parentName:"tr",align:null},"Tr\xe8s rapide, documentation auto")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"PHP"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"Laravel")),(0,a.kt)("td",{parentName:"tr",align:null},"\u2b50\u2b50\u2b50\u2b50\u2b50"),(0,a.kt)("td",{parentName:"tr",align:null},"\xc9l\xe9gant, ORM Eloquent, ecosystem")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"PHP"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"Symfony")),(0,a.kt)("td",{parentName:"tr",align:null},"\u2b50\u2b50\u2b50\u2b50"),(0,a.kt)("td",{parentName:"tr",align:null},"Enterprise, composants r\xe9utilisables")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Java"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"Spring Boot")),(0,a.kt)("td",{parentName:"tr",align:null},"\u2b50\u2b50\u2b50\u2b50\u2b50"),(0,a.kt)("td",{parentName:"tr",align:null},"Enterprise, robuste, \xe9cosyst\xe8me")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"C#"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"ASP.NET Core")),(0,a.kt)("td",{parentName:"tr",align:null},"\u2b50\u2b50\u2b50\u2b50"),(0,a.kt)("td",{parentName:"tr",align:null},"Microsoft, performant, cross-platform")))),(0,a.kt)("h2",{id:"\ufe0f-bases-de-donn\xe9es"},"\ud83d\uddc4\ufe0f Bases de donn\xe9es"),(0,a.kt)("h3",{id:"sql-relationnelles"},"SQL (Relationnelles)"),(0,a.kt)("h4",{id:"mysqlpostgresql"},"MySQL/PostgreSQL"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sql"},"-- Cr\xe9ation d'une table users\nCREATE TABLE users (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    name VARCHAR(100) NOT NULL,\n    email VARCHAR(255) UNIQUE NOT NULL,\n    password_hash VARCHAR(255) NOT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP\n);\n\n-- Insertion de donn\xe9es\nINSERT INTO users (name, email, password_hash) VALUES \n('Alice Dupont', 'alice@example.com', '$2b$12$hash...'),\n('Bob Martin', 'bob@example.com', '$2b$12$hash...');\n\n-- Requ\xeates complexes\nSELECT \n    u.name,\n    u.email,\n    COUNT(p.id) as total_posts,\n    AVG(p.rating) as avg_rating\nFROM users u\nLEFT JOIN posts p ON u.id = p.user_id\nWHERE u.created_at >= DATE_SUB(NOW(), INTERVAL 30 DAY)\nGROUP BY u.id\nHAVING total_posts > 5\nORDER BY avg_rating DESC;\n")),(0,a.kt)("h3",{id:"nosql-non-relationnelles"},"NoSQL (Non-relationnelles)"),(0,a.kt)("h4",{id:"mongodb"},"MongoDB"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"// Connexion et op\xe9rations MongoDB\nconst { MongoClient } = require('mongodb');\n\n// Connexion\nconst client = new MongoClient('mongodb://localhost:27017');\nconst db = client.db('myapp');\nconst users = db.collection('users');\n\n// Insertion\nconst newUser = {\n    name: 'Alice Dupont',\n    email: 'alice@example.com',\n    profile: {\n        age: 25,\n        city: 'Paris',\n        interests: ['web', 'design', 'photography']\n    },\n    posts: [],\n    createdAt: new Date()\n};\n\nconst result = await users.insertOne(newUser);\n\n// Recherche complexe\nconst activeUsers = await users.find({\n    'profile.age': { $gte: 18, $lte: 65 },\n    'profile.city': { $in: ['Paris', 'Lyon', 'Marseille'] },\n    createdAt: { $gte: new Date('2024-01-01') }\n}).sort({ createdAt: -1 }).limit(10).toArray();\n\n// Agr\xe9gation\nconst stats = await users.aggregate([\n    { $match: { 'profile.age': { $gte: 18 } } },\n    { $group: {\n        _id: '$profile.city',\n        totalUsers: { $sum: 1 },\n        avgAge: { $avg: '$profile.age' }\n    }},\n    { $sort: { totalUsers: -1 } }\n]).toArray();\n")),(0,a.kt)("h2",{id:"-authentification-et-s\xe9curit\xe9"},"\ud83d\udd10 Authentification et s\xe9curit\xe9"),(0,a.kt)("h3",{id:"jwt-json-web-tokens"},"JWT (JSON Web Tokens)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"const jwt = require('jsonwebtoken');\nconst bcrypt = require('bcryptjs');\nconst express = require('express');\nconst app = express();\n\n// Middleware de v\xe9rification JWT\nfunction authenticateToken(req, res, next) {\n    const authHeader = req.headers['authorization'];\n    const token = authHeader && authHeader.split(' ')[1];\n    \n    if (!token) {\n        return res.status(401).json({ error: 'Token manquant' });\n    }\n    \n    jwt.verify(token, process.env.JWT_SECRET, (err, user) => {\n        if (err) {\n            return res.status(403).json({ error: 'Token invalide' });\n        }\n        req.user = user;\n        next();\n    });\n}\n\n// Route de connexion\napp.post('/auth/login', async (req, res) => {\n    const { email, password } = req.body;\n    \n    // Trouver l'utilisateur\n    const user = await User.findOne({ email });\n    if (!user) {\n        return res.status(401).json({ error: 'Identifiants invalides' });\n    }\n    \n    // V\xe9rifier le mot de passe\n    const validPassword = await bcrypt.compare(password, user.passwordHash);\n    if (!validPassword) {\n        return res.status(401).json({ error: 'Identifiants invalides' });\n    }\n    \n    // G\xe9n\xe9rer le token\n    const token = jwt.sign(\n        { userId: user.id, email: user.email },\n        process.env.JWT_SECRET,\n        { expiresIn: '24h' }\n    );\n    \n    res.json({\n        token,\n        user: {\n            id: user.id,\n            name: user.name,\n            email: user.email\n        }\n    });\n});\n\n// Route prot\xe9g\xe9e\napp.get('/api/profile', authenticateToken, async (req, res) => {\n    const user = await User.findById(req.user.userId);\n    res.json(user);\n});\n")),(0,a.kt)("h3",{id:"validation-et-s\xe9curit\xe9"},"Validation et s\xe9curit\xe9"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"const validator = require('validator');\nconst rateLimit = require('express-rate-limit');\nconst helmet = require('helmet');\nconst xss = require('xss');\n\n// S\xe9curit\xe9 globale\napp.use(helmet());\n\n// Rate limiting\nconst limiter = rateLimit({\n    windowMs: 15 * 60 * 1000, // 15 minutes\n    max: 100, // limite \xe0 100 requ\xeates par IP\n    message: 'Trop de requ\xeates, r\xe9essayez plus tard'\n});\napp.use('/api/', limiter);\n\n// Validation des donn\xe9es\nfunction validateUser(req, res, next) {\n    const { name, email, password } = req.body;\n    const errors = [];\n    \n    if (!name || name.length < 2) {\n        errors.push('Le nom doit contenir au moins 2 caract\xe8res');\n    }\n    \n    if (!validator.isEmail(email)) {\n        errors.push('Email invalide');\n    }\n    \n    if (!password || password.length < 8) {\n        errors.push('Le mot de passe doit contenir au moins 8 caract\xe8res');\n    }\n    \n    if (!/(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)/.test(password)) {\n        errors.push('Le mot de passe doit contenir au moins une minuscule, une majuscule et un chiffre');\n    }\n    \n    if (errors.length > 0) {\n        return res.status(400).json({ errors });\n    }\n    \n    // Nettoyer les donn\xe9es contre XSS\n    req.body.name = xss(req.body.name);\n    req.body.email = validator.normalizeEmail(req.body.email);\n    \n    next();\n}\n\napp.post('/api/users', validateUser, async (req, res) => {\n    // Traitement s\xe9curis\xe9\n});\n")),(0,a.kt)("h2",{id:"-apis-et-communication"},"\ud83d\udce1 APIs et communication"),(0,a.kt)("h3",{id:"rest-api"},"REST API"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"// API RESTful compl\xe8te\nconst express = require('express');\nconst router = express.Router();\n\n// GET /api/posts - R\xe9cup\xe9rer tous les posts\nrouter.get('/posts', async (req, res) => {\n    try {\n        const { page = 1, limit = 10, category, author } = req.query;\n        \n        const filters = {};\n        if (category) filters.category = category;\n        if (author) filters.author = author;\n        \n        const posts = await Post.find(filters)\n            .populate('author', 'name email')\n            .sort({ createdAt: -1 })\n            .limit(limit * 1)\n            .skip((page - 1) * limit);\n            \n        const total = await Post.countDocuments(filters);\n        \n        res.json({\n            posts,\n            pagination: {\n                current: page,\n                pages: Math.ceil(total / limit),\n                total\n            }\n        });\n    } catch (error) {\n        res.status(500).json({ error: error.message });\n    }\n});\n\n// GET /api/posts/:id - R\xe9cup\xe9rer un post sp\xe9cifique\nrouter.get('/posts/:id', async (req, res) => {\n    try {\n        const post = await Post.findById(req.params.id)\n            .populate('author', 'name email avatar')\n            .populate('comments.author', 'name');\n            \n        if (!post) {\n            return res.status(404).json({ error: 'Post non trouv\xe9' });\n        }\n        \n        res.json(post);\n    } catch (error) {\n        res.status(500).json({ error: error.message });\n    }\n});\n\n// POST /api/posts - Cr\xe9er un nouveau post\nrouter.post('/posts', authenticateToken, async (req, res) => {\n    try {\n        const { title, content, category, tags } = req.body;\n        \n        const post = new Post({\n            title,\n            content,\n            category,\n            tags,\n            author: req.user.userId,\n            slug: generateSlug(title),\n            createdAt: new Date()\n        });\n        \n        await post.save();\n        await post.populate('author', 'name email');\n        \n        res.status(201).json(post);\n    } catch (error) {\n        res.status(400).json({ error: error.message });\n    }\n});\n\n// PUT /api/posts/:id - Mettre \xe0 jour un post\nrouter.put('/posts/:id', authenticateToken, async (req, res) => {\n    try {\n        const post = await Post.findById(req.params.id);\n        \n        if (!post) {\n            return res.status(404).json({ error: 'Post non trouv\xe9' });\n        }\n        \n        // V\xe9rifier que l'utilisateur est l'auteur\n        if (post.author.toString() !== req.user.userId) {\n            return res.status(403).json({ error: 'Non autoris\xe9' });\n        }\n        \n        const updatedPost = await Post.findByIdAndUpdate(\n            req.params.id,\n            { ...req.body, updatedAt: new Date() },\n            { new: true }\n        ).populate('author', 'name email');\n        \n        res.json(updatedPost);\n    } catch (error) {\n        res.status(400).json({ error: error.message });\n    }\n});\n\n// DELETE /api/posts/:id - Supprimer un post\nrouter.delete('/posts/:id', authenticateToken, async (req, res) => {\n    try {\n        const post = await Post.findById(req.params.id);\n        \n        if (!post) {\n            return res.status(404).json({ error: 'Post non trouv\xe9' });\n        }\n        \n        if (post.author.toString() !== req.user.userId) {\n            return res.status(403).json({ error: 'Non autoris\xe9' });\n        }\n        \n        await Post.findByIdAndDelete(req.params.id);\n        res.status(204).send();\n    } catch (error) {\n        res.status(500).json({ error: error.message });\n    }\n});\n")),(0,a.kt)("h3",{id:"graphql"},"GraphQL"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"// Sch\xe9ma GraphQL\nconst { gql } = require('apollo-server-express');\n\nconst typeDefs = gql`\n    type User {\n        id: ID!\n        name: String!\n        email: String!\n        posts: [Post!]!\n        createdAt: String!\n    }\n    \n    type Post {\n        id: ID!\n        title: String!\n        content: String!\n        author: User!\n        comments: [Comment!]!\n        likes: Int!\n        createdAt: String!\n    }\n    \n    type Comment {\n        id: ID!\n        content: String!\n        author: User!\n        post: Post!\n        createdAt: String!\n    }\n    \n    type Query {\n        users: [User!]!\n        user(id: ID!): User\n        posts(limit: Int, offset: Int): [Post!]!\n        post(id: ID!): Post\n    }\n    \n    type Mutation {\n        createUser(name: String!, email: String!, password: String!): User!\n        createPost(title: String!, content: String!): Post!\n        createComment(postId: ID!, content: String!): Comment!\n        likePost(postId: ID!): Post!\n    }\n    \n    type Subscription {\n        postAdded: Post!\n        commentAdded(postId: ID!): Comment!\n    }\n`;\n\n// Resolvers\nconst resolvers = {\n    Query: {\n        users: () => User.find().populate('posts'),\n        user: (parent, { id }) => User.findById(id).populate('posts'),\n        posts: (parent, { limit = 10, offset = 0 }) => \n            Post.find().populate('author').limit(limit).skip(offset),\n        post: (parent, { id }) => \n            Post.findById(id).populate(['author', 'comments.author'])\n    },\n    \n    Mutation: {\n        createUser: async (parent, { name, email, password }) => {\n            const hashedPassword = await bcrypt.hash(password, 12);\n            const user = new User({ name, email, password: hashedPassword });\n            return await user.save();\n        },\n        \n        createPost: async (parent, { title, content }, { user }) => {\n            if (!user) throw new Error('Non authentifi\xe9');\n            \n            const post = new Post({\n                title,\n                content,\n                author: user.id\n            });\n            \n            await post.save();\n            await post.populate('author');\n            \n            // Notification en temps r\xe9el\n            pubsub.publish('POST_ADDED', { postAdded: post });\n            \n            return post;\n        }\n    },\n    \n    Subscription: {\n        postAdded: {\n            subscribe: () => pubsub.asyncIterator(['POST_ADDED'])\n        }\n    }\n};\n")),(0,a.kt)("h2",{id:"\ufe0f-architecture-et-patterns"},"\ud83c\udfd7\ufe0f Architecture et patterns"),(0,a.kt)("h3",{id:"architecture-en-couches"},"Architecture en couches"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"// Structure du projet\n/*\nsrc/\n\u251c\u2500\u2500 controllers/     # Logique de contr\xf4le\n\u251c\u2500\u2500 services/       # Logique m\xe9tier\n\u251c\u2500\u2500 repositories/   # Acc\xe8s aux donn\xe9es\n\u251c\u2500\u2500 models/         # Mod\xe8les de donn\xe9es\n\u251c\u2500\u2500 middlewares/    # Middlewares Express\n\u251c\u2500\u2500 routes/         # D\xe9finition des routes\n\u251c\u2500\u2500 utils/          # Utilitaires\n\u251c\u2500\u2500 config/         # Configuration\n\u2514\u2500\u2500 tests/          # Tests\n*/\n\n// Controller\nclass UserController {\n    constructor(userService) {\n        this.userService = userService;\n    }\n    \n    async getUsers(req, res) {\n        try {\n            const users = await this.userService.getAllUsers();\n            res.json(users);\n        } catch (error) {\n            res.status(500).json({ error: error.message });\n        }\n    }\n    \n    async createUser(req, res) {\n        try {\n            const user = await this.userService.createUser(req.body);\n            res.status(201).json(user);\n        } catch (error) {\n            res.status(400).json({ error: error.message });\n        }\n    }\n}\n\n// Service (Logique m\xe9tier)\nclass UserService {\n    constructor(userRepository, emailService) {\n        this.userRepository = userRepository;\n        this.emailService = emailService;\n    }\n    \n    async createUser(userData) {\n        // Validation\n        await this.validateUserData(userData);\n        \n        // V\xe9rifier que l'email n'existe pas\n        const existingUser = await this.userRepository.findByEmail(userData.email);\n        if (existingUser) {\n            throw new Error('Email d\xe9j\xe0 utilis\xe9');\n        }\n        \n        // Hash du mot de passe\n        userData.password = await bcrypt.hash(userData.password, 12);\n        \n        // Cr\xe9er l'utilisateur\n        const user = await this.userRepository.create(userData);\n        \n        // Envoyer email de bienvenue\n        await this.emailService.sendWelcomeEmail(user.email, user.name);\n        \n        return user;\n    }\n    \n    async validateUserData(userData) {\n        const schema = Joi.object({\n            name: Joi.string().min(2).max(50).required(),\n            email: Joi.string().email().required(),\n            password: Joi.string().min(8).required()\n        });\n        \n        const { error } = schema.validate(userData);\n        if (error) {\n            throw new Error(error.details[0].message);\n        }\n    }\n}\n\n// Repository (Acc\xe8s donn\xe9es)\nclass UserRepository {\n    async findAll() {\n        return await User.find().select('-password');\n    }\n    \n    async findById(id) {\n        return await User.findById(id).select('-password');\n    }\n    \n    async findByEmail(email) {\n        return await User.findOne({ email });\n    }\n    \n    async create(userData) {\n        const user = new User(userData);\n        await user.save();\n        return user.toObject({ versionKey: false, transform: (doc, ret) => {\n            delete ret.password;\n            return ret;\n        }});\n    }\n    \n    async update(id, updateData) {\n        return await User.findByIdAndUpdate(id, updateData, { new: true }).select('-password');\n    }\n    \n    async delete(id) {\n        return await User.findByIdAndDelete(id);\n    }\n}\n")),(0,a.kt)("h3",{id:"microservices"},"Microservices"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"// Service utilisateur (port 3001)\nconst express = require('express');\nconst app = express();\n\napp.get('/health', (req, res) => {\n    res.json({ service: 'user-service', status: 'healthy' });\n});\n\napp.get('/users/:id', async (req, res) => {\n    const user = await getUserById(req.params.id);\n    res.json(user);\n});\n\napp.listen(3001);\n\n// Service de commandes (port 3002)\nconst express = require('express');\nconst axios = require('axios');\nconst app = express();\n\napp.post('/orders', async (req, res) => {\n    try {\n        // V\xe9rifier que l'utilisateur existe\n        const userResponse = await axios.get(`http://user-service:3001/users/${req.body.userId}`);\n        const user = userResponse.data;\n        \n        // V\xe9rifier le stock des produits\n        const productResponse = await axios.post('http://inventory-service:3003/check-stock', {\n            products: req.body.products\n        });\n        \n        if (!productResponse.data.available) {\n            return res.status(400).json({ error: 'Stock insuffisant' });\n        }\n        \n        // Cr\xe9er la commande\n        const order = await createOrder(req.body);\n        \n        // Envoyer notification\n        await axios.post('http://notification-service:3004/send', {\n            type: 'order_created',\n            userId: user.id,\n            orderId: order.id\n        });\n        \n        res.status(201).json(order);\n    } catch (error) {\n        res.status(500).json({ error: error.message });\n    }\n});\n\napp.listen(3002);\n\n// API Gateway\nconst express = require('express');\nconst { createProxyMiddleware } = require('http-proxy-middleware');\nconst rateLimit = require('express-rate-limit');\nconst app = express();\n\n// Rate limiting global\nconst limiter = rateLimit({\n    windowMs: 15 * 60 * 1000,\n    max: 1000\n});\napp.use(limiter);\n\n// Authentification middleware\napp.use(authenticateToken);\n\n// Proxies vers les microservices\napp.use('/api/users', createProxyMiddleware({\n    target: 'http://user-service:3001',\n    changeOrigin: true,\n    pathRewrite: { '^/api/users': '/users' }\n}));\n\napp.use('/api/orders', createProxyMiddleware({\n    target: 'http://order-service:3002',\n    changeOrigin: true,\n    pathRewrite: { '^/api/orders': '/orders' }\n}));\n\napp.listen(3000);\n")),(0,a.kt)("h2",{id:"-d\xe9ploiement-et-devops"},"\ud83d\ude80 D\xe9ploiement et DevOps"),(0,a.kt)("h3",{id:"docker"},"Docker"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dockerfile"},'# Dockerfile pour application Node.js\nFROM node:18-alpine\n\n# Cr\xe9er le r\xe9pertoire de l\'app\nWORKDIR /usr/src/app\n\n# Copier package.json et package-lock.json\nCOPY package*.json ./\n\n# Installer les d\xe9pendances\nRUN npm ci --only=production && npm cache clean --force\n\n# Cr\xe9er un utilisateur non-root\nRUN addgroup -g 1001 -S nodejs\nRUN adduser -S nodeuser -u 1001\n\n# Copier le code source\nCOPY --chown=nodeuser:nodejs . .\n\n# Changer vers l\'utilisateur non-root\nUSER nodeuser\n\n# Exposer le port\nEXPOSE 3000\n\n# Commande de d\xe9marrage\nCMD ["node", "server.js"]\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'# docker-compose.yml\nversion: \'3.8\'\n\nservices:\n  app:\n    build: .\n    ports:\n      - "3000:3000"\n    environment:\n      - NODE_ENV=production\n      - DATABASE_URL=mongodb://mongo:27017/myapp\n      - REDIS_URL=redis://redis:6379\n    depends_on:\n      - mongo\n      - redis\n    volumes:\n      - ./logs:/usr/src/app/logs\n    restart: unless-stopped\n\n  mongo:\n    image: mongo:5\n    ports:\n      - "27017:27017"\n    volumes:\n      - mongo_data:/data/db\n    environment:\n      - MONGO_INITDB_ROOT_USERNAME=admin\n      - MONGO_INITDB_ROOT_PASSWORD=password\n\n  redis:\n    image: redis:7-alpine\n    ports:\n      - "6379:6379"\n    volumes:\n      - redis_data:/data\n    command: redis-server --appendonly yes\n\n  nginx:\n    image: nginx:alpine\n    ports:\n      - "80:80"\n      - "443:443"\n    volumes:\n      - ./nginx.conf:/etc/nginx/nginx.conf\n      - ./ssl:/etc/nginx/ssl\n    depends_on:\n      - app\n\nvolumes:\n  mongo_data:\n  redis_data:\n')),(0,a.kt)("h3",{id:"cicd-avec-github-actions"},"CI/CD avec GitHub Actions"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"# .github/workflows/deploy.yml\nname: Deploy to Production\n\non:\n  push:\n    branches: [main]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    \n    services:\n      mongo:\n        image: mongo:5\n        ports:\n          - 27017:27017\n      \n      redis:\n        image: redis:7\n        ports:\n          - 6379:6379\n    \n    steps:\n      - uses: actions/checkout@v3\n      \n      - name: Setup Node.js\n        uses: actions/setup-node@v3\n        with:\n          node-version: '18'\n          cache: 'npm'\n      \n      - name: Install dependencies\n        run: npm ci\n      \n      - name: Run linting\n        run: npm run lint\n      \n      - name: Run tests\n        run: npm test\n        env:\n          NODE_ENV: test\n          DATABASE_URL: mongodb://localhost:27017/test\n          REDIS_URL: redis://localhost:6379\n  \n  deploy:\n    needs: test\n    runs-on: ubuntu-latest\n    if: github.ref == 'refs/heads/main'\n    \n    steps:\n      - uses: actions/checkout@v3\n      \n      - name: Deploy to server\n        uses: appleboy/ssh-action@v0.1.5\n        with:\n          host: ${{ secrets.HOST }}\n          username: ${{ secrets.USERNAME }}\n          key: ${{ secrets.SSH_KEY }}\n          script: |\n            cd /var/www/myapp\n            git pull origin main\n            npm ci --production\n            npm run build\n            pm2 restart myapp\n")),(0,a.kt)("h2",{id:"-monitoring-et-observabilit\xe9"},"\ud83d\udcca Monitoring et observabilit\xe9"),(0,a.kt)("h3",{id:"logging"},"Logging"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"const winston = require('winston');\n\n// Configuration du logger\nconst logger = winston.createLogger({\n    level: 'info',\n    format: winston.format.combine(\n        winston.format.timestamp(),\n        winston.format.errors({ stack: true }),\n        winston.format.json()\n    ),\n    defaultMeta: { service: 'user-service' },\n    transports: [\n        new winston.transports.File({ filename: 'logs/error.log', level: 'error' }),\n        new winston.transports.File({ filename: 'logs/combined.log' }),\n        new winston.transports.Console({\n            format: winston.format.simple()\n        })\n    ]\n});\n\n// Middleware de logging des requ\xeates\napp.use((req, res, next) => {\n    const start = Date.now();\n    \n    res.on('finish', () => {\n        const duration = Date.now() - start;\n        logger.info('HTTP Request', {\n            method: req.method,\n            url: req.url,\n            statusCode: res.statusCode,\n            duration: `${duration}ms`,\n            userAgent: req.get('User-Agent'),\n            ip: req.ip\n        });\n    });\n    \n    next();\n});\n\n// Gestion globale des erreurs\napp.use((error, req, res, next) => {\n    logger.error('Unhandled Error', {\n        error: error.message,\n        stack: error.stack,\n        url: req.url,\n        method: req.method,\n        body: req.body,\n        user: req.user?.id\n    });\n    \n    res.status(500).json({\n        error: process.env.NODE_ENV === 'production' \n            ? 'Erreur interne du serveur' \n            : error.message\n    });\n});\n")),(0,a.kt)("h3",{id:"m\xe9triques-avec-prometheus"},"M\xe9triques avec Prometheus"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"const prometheus = require('prom-client');\n\n// M\xe9triques par d\xe9faut\nprometheus.collectDefaultMetrics();\n\n// M\xe9triques personnalis\xe9es\nconst httpRequestDuration = new prometheus.Histogram({\n    name: 'http_request_duration_seconds',\n    help: 'Duration of HTTP requests in seconds',\n    labelNames: ['method', 'route', 'status_code'],\n    buckets: [0.1, 0.5, 1, 2, 5]\n});\n\nconst httpRequestsTotal = new prometheus.Counter({\n    name: 'http_requests_total',\n    help: 'Total number of HTTP requests',\n    labelNames: ['method', 'route', 'status_code']\n});\n\nconst activeConnections = new prometheus.Gauge({\n    name: 'active_connections',\n    help: 'Number of active connections'\n});\n\n// Middleware pour collecter les m\xe9triques\napp.use((req, res, next) => {\n    const start = Date.now();\n    \n    res.on('finish', () => {\n        const duration = (Date.now() - start) / 1000;\n        const route = req.route?.path || req.path;\n        \n        httpRequestDuration\n            .labels(req.method, route, res.statusCode)\n            .observe(duration);\n            \n        httpRequestsTotal\n            .labels(req.method, route, res.statusCode)\n            .inc();\n    });\n    \n    next();\n});\n\n// Endpoint pour exposer les m\xe9triques\napp.get('/metrics', (req, res) => {\n    res.set('Content-Type', prometheus.register.contentType);\n    res.end(prometheus.register.metrics());\n});\n")),(0,a.kt)("h2",{id:"-exercices-pratiques"},"\ud83c\udfaf Exercices pratiques"),(0,a.kt)("h3",{id:"exercice-1--api-de-blog"},"Exercice 1 : API de blog"),(0,a.kt)("p",null,"Cr\xe9e une API REST compl\xe8te pour un blog avec :"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Authentification JWT"),(0,a.kt)("li",{parentName:"ul"},"CRUD pour articles et commentaires"),(0,a.kt)("li",{parentName:"ul"},"Syst\xe8me de likes"),(0,a.kt)("li",{parentName:"ul"},"Upload d'images"),(0,a.kt)("li",{parentName:"ul"},"Pagination et filtres")),(0,a.kt)("h3",{id:"exercice-2--chat-en-temps-r\xe9el"},"Exercice 2 : Chat en temps r\xe9el"),(0,a.kt)("p",null,"D\xe9veloppe une application de chat avec :"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"WebSockets avec Socket.io"),(0,a.kt)("li",{parentName:"ul"},"Salles de discussion"),(0,a.kt)("li",{parentName:"ul"},"Messages priv\xe9s"),(0,a.kt)("li",{parentName:"ul"},"Historique des messages"),(0,a.kt)("li",{parentName:"ul"},"Notifications push")),(0,a.kt)("h3",{id:"exercice-3--e-commerce-backend"},"Exercice 3 : E-commerce backend"),(0,a.kt)("p",null,"Construit le backend d'une boutique en ligne :"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Gestion des produits et cat\xe9gories"),(0,a.kt)("li",{parentName:"ul"},"Panier et commandes"),(0,a.kt)("li",{parentName:"ul"},"Syst\xe8me de paiement (Stripe)"),(0,a.kt)("li",{parentName:"ul"},"Gestion des stocks"),(0,a.kt)("li",{parentName:"ul"},"Rapports et analytics")),(0,a.kt)("hr",null),(0,a.kt)("div",{className:"admonition admonition-success alert alert--success"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"F\xe9licitations ! \ud83c\udf89")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"Tu as maintenant une compr\xe9hension solide du d\xe9veloppement back-end ! Le back-end est le ",(0,a.kt)("strong",{parentName:"p"},"c\u0153ur")," de toute application. Continue \xe0 pratiquer en cr\xe9ant des projets concrets et n'h\xe9site pas \xe0 explorer les diff\xe9rentes technologies selon tes besoins."))),(0,a.kt)("h2",{id:"-pour-aller-plus-loin"},"\ud83d\ude80 Pour aller plus loin"),(0,a.kt)("h3",{id:"concepts-avanc\xe9s-\xe0-explorer"},"Concepts avanc\xe9s \xe0 explorer"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Event-driven architecture")," - Architecture \xe9v\xe9nementielle"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"CQRS et Event Sourcing")," - S\xe9paration lecture/\xe9criture"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Message queues")," - Redis, RabbitMQ, Apache Kafka"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Caching")," - Strat\xe9gies de mise en cache"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Database optimization")," - Index, requ\xeates optimis\xe9es"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Serverless")," - AWS Lambda, Vercel Functions"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"GraphQL Federation")," - Microservices GraphQL")),(0,a.kt)("h3",{id:"ressources-recommand\xe9es"},"Ressources recommand\xe9es"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\ud83d\udcd6 ",(0,a.kt)("a",{parentName:"li",href:"https://nodejs.org/docs/"},"Node.js Documentation")),(0,a.kt)("li",{parentName:"ul"},"\ud83c\udf93 ",(0,a.kt)("a",{parentName:"li",href:"https://university.mongodb.com/"},"MongoDB University")),(0,a.kt)("li",{parentName:"ul"},'\ud83d\udcda "Clean Architecture" by Robert Martin'),(0,a.kt)("li",{parentName:"ul"},"\ud83d\udd17 ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/microsoft/api-guidelines"},"API Design Guidelines")),(0,a.kt)("li",{parentName:"ul"},"\ud83c\udfa5 ",(0,a.kt)("a",{parentName:"li",href:"https://kubernetes.io/docs/tutorials/"},"Docker & Kubernetes Tutorials"))))}d.isMDXComponent=!0}}]);